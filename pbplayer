#!/usr/bin/env python

import sys, os
import pygtk, gtk, gobject
import pygst
pygst.require("0.10")
import gst

class GTK_Main:
  def set_app_state(self, state):
    if state == "STOP":
      if self.timeout:
        gobject.source_remove(self.timeout)
        self.timeout = None
      self.duration = None
      self.jump_to = None
      self.play_button.set_label(">")
      self.toggle_controls (True)
      self.pos_slider.set_value (0)
      self.player.set_state(gst.STATE_NULL)
    elif state == "PLAY":
      self.play_button.set_label("||")
      self.toggle_controls (False)
      self.player.set_state(gst.STATE_PAUSED)
    elif state == "PAUSE":
      self.play_button.set_label(">")
      self.toggle_controls (True)
      self.player.set_state(gst.STATE_PAUSED)
    self.app_state = state
    print self.app_state
      
  def __init__(self):
    self.timeout = None
    self.last_folder = None
    self.rate = 1.0

    window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    self.window = window
    window.set_title("Playbin Player")
    window.set_default_size(240, 240)
    window.connect("destroy", gtk.main_quit, "WM destroy")

    vbox = gtk.VBox()
    window.add(vbox)
    self.control_panel = gtk.VBox ()
    self.movie_window = gtk.DrawingArea()
    vbox.pack_start (self.control_panel, expand = False)
    vbox.pack_end (self.movie_window, expand = True)
    vbox = self.control_panel
    
    hbox = gtk.HBox()
    vbox.add (hbox)
    self.open_button = gtk.Button("Open")
    self.open_button.connect("clicked", self.do_open)
    hbox.pack_start(self.open_button, expand = False)
    self.entry = gtk.Entry()
    if len (sys.argv) > 1:
      self.entry.set_text (sys.argv [1])
      (self.last_folder, _) = os.path.split (sys.argv [1])
    hbox.add(self.entry)
    self.play_button = gtk.Button(">")
    self.play_button.connect("clicked", self.on_play)
    hbox.add_with_properties(self.play_button, "expand", False)
    self.stop_button = gtk.Button("Stop")
    self.stop_button.connect("clicked", self.on_stop)
    hbox.add_with_properties(self.stop_button, "expand", False)

    hbox = gtk.HBox()
    vbox.add (hbox)
    self.slow_button = gtk.Button("Slower")
    self.slow_button.connect("clicked", self.slower)
    hbox.pack_start(self.slow_button)
    self.speed1_button = gtk.Button("1x")
    self.speed1_button.connect("clicked", self.normal_speed)
    hbox.add(self.speed1_button)
    self.fast_button = gtk.Button("Faster")
    self.fast_button.connect("clicked", self.faster)
    hbox.pack_end(self.fast_button)

    hbox = gtk.HBox()
    vbox.add (hbox)
    self.on_backward_button = gtk.Button ("<<")
    self.on_backward_button.connect("clicked", self.on_backward)
    hbox.pack_start(self.on_backward_button, expand = False)
    self.pos_slider = gtk.HScale (gtk.Adjustment (0.0, 0.0, 101.5, 0.5, 2.0, 1.5))
    self.pos_slider.set_update_policy(gtk.UPDATE_DISCONTINUOUS)
    self.pos_slider.connect ("change-value", self.on_change_position1)
    self.pos_slider.connect ("value-changed", self.on_change_position2)
    hbox.add (self.pos_slider)
    self.on_forward_button = gtk.Button (">>")
    self.on_forward_button.connect("clicked", self.on_forward)
    hbox.pack_end(self.on_forward_button, expand = False)

    self.movie_window.connect("button_press_event", self.on_movie_clicked)
    self.movie_window.set_events(gtk.gdk.BUTTON_PRESS_MASK)

    self.player = gst.element_factory_make("playbin2", "player")
    bus = self.player.get_bus()
    bus.add_signal_watch()
    bus.connect("message", self.on_message)
    bus.enable_sync_message_emission()
    bus.connect("sync-message::element", self.on_sync_message)

    self.set_app_state("STOP")
    window.show_all()
    if (self.entry.get_text()): self.start_playbin()
    
  def do_open(self, w):
    chooser = gtk.FileChooserDialog(title = "Open", action = gtk.FILE_CHOOSER_ACTION_OPEN,
                                    buttons = (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL, gtk.STOCK_OPEN, gtk.RESPONSE_OK))
    chooser.set_show_hidden (True)
    if (self.last_folder): chooser.set_current_folder (self.last_folder)
    response = chooser.run ()
    if response == gtk.RESPONSE_OK:
      filepath = chooser.get_filename()
      print "File %s" % (filepath)
      self.entry.set_text (filepath)
      self.last_folder = os.path.dirname(filepath)
      self.start_playbin()
    chooser.destroy()
    
  def start_playbin(self):
    filepath = self.entry.get_text()
    if os.path.isfile(filepath):
      self.player.set_property("uri", "file://" + filepath)
      self.timeout = gobject.timeout_add_seconds (1, self.update_ui)
      self.player.set_state(gst.STATE_PAUSED)
      self.set_app_state("PLAY")

  def update_ui (self):
    if self.player.get_state() [1] == gst.STATE_PLAYING:
      if self.jump_to is None:
        pos = 100.0 * self.player.query_position (gst.FORMAT_TIME, None) [0] / self.duration
        self.pos_slider.set_value (pos)
    return True

  def on_play(self, w):
    if self.app_state == "PAUSE":  # unpause
      self.set_app_state("PLAY")
    elif self.app_state == "STOP":  # start
      self.start_playbin()
      self.set_app_state("PLAY")
    else:  # pause
      self.set_app_state("PAUSE")

  def on_stop(self, w):
    self.set_app_state("STOP")

  def change_rate(self, rate, pos = None):
    self.rate = rate; print "Rate %s" % (self.rate)
    if pos is None:
      pos = self.player.query_position(gst.FORMAT_TIME, None)[0]
    self.player.seek (self.rate, gst.FORMAT_TIME, gst.SEEK_FLAG_FLUSH,
                      gst.SEEK_TYPE_SET, pos,
                      gst.SEEK_TYPE_NONE, -1)
  def faster(self, w):
    self.change_rate (self.rate * 1.1)
  def slower(self, w):
    self.change_rate (self.rate / 1.1)
  def normal_speed(self, w):
    self.change_rate (1.0)

  def on_change_position1(self, w, *args):
    self.jump_to = self.pos_slider.get_value ()

  def on_change_position2(self, w, *args):
    if self.jump_to:
      #pos_int = self.player.query_position(gst.FORMAT_TIME, None)[0]
      #print "Jump %s -> %s" % (pos_int, self.duration * self.jump_to / 100)
      self.player.seek (self.rate, gst.FORMAT_TIME, gst.SEEK_FLAG_FLUSH,
                        gst.SEEK_TYPE_SET, self.duration * self.jump_to / 100,
                        gst.SEEK_TYPE_NONE, -1)
      self.jump_to = None

  def forward_backward(self, w, delta):
    pos_int = self.player.query_position(gst.FORMAT_TIME, None)[0]
    self.player.seek (self.rate, gst.FORMAT_TIME, gst.SEEK_FLAG_FLUSH,
                      gst.SEEK_TYPE_SET, pos_int + delta,
                      gst.SEEK_TYPE_NONE, -1)

  def on_forward(self, w):
    self.forward_backward(w, 5000000000)
  def on_backward(self, w):
    self.forward_backward(w, -5000000000)

  def toggle_controls(self, make_visible = None):
    if make_visible is None:
      make_visible = not self.control_panel.props.visible  # toggle
    if make_visible:
      self.control_panel.show()
      self.window.unfullscreen()
    else:
      self.control_panel.hide()
      self.window.fullscreen()
      
  def on_movie_clicked(self, w, e):
    self.toggle_controls()
  
  def on_message(self, bus, message):
    t = message.type
    if t == gst.MESSAGE_ASYNC_DONE:
      if self.app_state == "PLAY":
        if self.duration is None:  # 1st time only
          self.duration = self.player.query_duration (gst.FORMAT_TIME, None) [0]
          print "Duration %s" % (self.duration)
          self.change_rate (self.rate, pos = 0)
          self.player.set_state (gst.STATE_PLAYING)
    if t == gst.MESSAGE_EOS:
      self.set_app_state("STOP")
    elif t == gst.MESSAGE_ERROR:
      err, debug = message.parse_error()
      print "Error: %s" % err, debug
      self.set_app_state("STOP")

  def on_sync_message(self, bus, message):
    if message.structure is None: return
    message_name = message.structure.get_name()
    if message_name == "prepare-xwindow-id":
      imagesink = message.src
      imagesink.set_property("force-aspect-ratio", True)
      gtk.gdk.threads_enter()
      imagesink.set_xwindow_id(self.movie_window.window.xid)
      gtk.gdk.threads_leave()

GTK_Main()
gtk.gdk.threads_init()
gtk.main()
